Categoria,Descrição
Model,Representa a camada de dados da aplicação. Os modelos são responsáveis por gerenciar a lógica de negócios e interagir com o banco de dados. Eles são definidos como classes e geralmente herdam de `ActiveRecord::Base`, que fornece métodos para realizar operações CRUD (Create, Read, Update, Delete).
View,Trata da apresentação dos dados ao usuário. As views são responsáveis pela interface do usuário e são compostas por templates que geram HTML. Elas podem utilizar ERB (Embedded Ruby) ou outros mecanismos de template para incorporar código Ruby dentro do HTML.
Controller,Atua como intermediário entre os Models e as Views. Os controllers recebem as requisições do usuário, interagem com os models para obter dados, e selecionam as views apropriadas para renderização. Cada ação de um controller corresponde a um método que lida com uma rota específica.
Routing,Define como as requisições são mapeadas para os controllers e suas ações. O roteamento em Rails é configurado no arquivo `config/routes.rb` e utiliza uma sintaxe DSL (Domain-Specific Language) para definir as rotas de maneira legível e intuitiva.
Active Record,É a implementação do padrão Active Record dentro do Rails, facilitando a criação e uso de objetos que representam tabelas no banco de dados. Ele fornece uma camada de abstração sobre o banco de dados, permitindo que operações complexas sejam realizadas com simplicidade.
Migrations,Permitem a gestão das alterações na estrutura do banco de dados de forma versionada. As migrations são escritas em Ruby e oferecem uma maneira conveniente de criar, alterar e remover tabelas e colunas no banco de dados.
Helpers,São métodos que ajudam a manter as views limpas e organizadas, encapsulando lógica complexa ou repetitiva. Os helpers são definidos em módulos e podem ser utilizados em templates de view para facilitar a construção de elementos da interface.
Assets,Incluem arquivos como JavaScript, CSS, e imagens. Rails fornece uma estrutura organizada para gerenciar e servir esses ativos de maneira eficiente, utilizando o pipeline de assets para minificar e compilar arquivos.
Layouts,São templates que envolvem outras views, permitindo uma consistência visual em toda a aplicação. Eles contêm a estrutura básica da página, como cabeçalho e rodapé, e inserem o conteúdo das views em regiões designadas.
Gems,São bibliotecas ou plugins que podem ser incluídos em um projeto Rails para adicionar funcionalidades ou simplificar tarefas comuns. O RubyGems é o gerenciador de pacotes padrão para Ruby, e a maioria das gems pode ser encontrada e instalada através do repositório RubyGems.org.
Generators,Ferramentas que automatizam a criação de arquivos e estruturas comuns em projetos Rails, como controllers, models, e scaffolds. Eles ajudam a economizar tempo e garantem consistência na configuração inicial do projeto.
Scaffolding,Uma funcionalidade que gera automaticamente o código necessário para um CRUD básico. É útil para prototipagem rápida, fornecendo uma estrutura inicial que pode ser customizada conforme necessário.
Concerns,São módulos que encapsulam funcionalidades compartilháveis entre diferentes models ou controllers. Eles ajudam a manter o código DRY (Don't Repeat Yourself) e organizado.
Action Mailer,Um framework dentro do Rails para criar e enviar emails. Ele fornece uma maneira simples de definir templates de email e enviar mensagens usando diversos provedores de serviço.
Active Job,Framework para gerenciar e executar tarefas em background. Ele permite enfileirar jobs que são processados de forma assíncrona, utilizando adaptadores para diversas bibliotecas de fila como Sidekiq e Resque.
Testing,Rails inclui um conjunto robusto de ferramentas para testes automatizados, incluindo unit tests, functional tests e integration tests. Ele suporta RSpec, Minitest, e outras bibliotecas de testes, facilitando a escrita de testes para garantir a qualidade do código.
